curl -X POST "https://accounts.spotify.com/api/token" \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "grant_type=client_credentials&client_id=your-client-id&client_secret=your-client-secret"


curl -X POST "https://accounts.spotify.com/api/token" \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "grant_type=client_credentials&client_id=CLIENT_ID&client_secret=CLIENT_SECRET"


x post https://accounts.google.com/o/oauth2/v2/auth




https://developer.spotify.com/documentation/web-api/reference/get-playlist

playlist id: 18Y1uKbT84hUBRy6oqSH9Q
name, description, uri, tracks(items(track(name, external_urls, album(name), artists(name))))

{"tracks":
     {"items":
          [
               {"track":
               {
                    "artists":
                         [
                              {
                                   "name":"Alexisonfire"
                              }
                         ],
                    "album":
                    {
                         "name":"Crisis"
                    },
                    "external_urls":
                    {
                         "spotify":"https://open.spotify.com/track/3mE1W8j5OZstBKtZhRKWXg"
                    },
                    "name":"Boiled Frogs"
                    }
               },


curl --request GET \
  --url 'https://api.spotify.com/v1/playlists/18Y1uKbT84hUBRy6oqSH9Q/tracks?fields=items%28track%28album%28name%29%2C+artists%28name%29%2C++preview_url%2C+name%2C+duration_ms%29%29&limit=100&offset=1400' \
  --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'



get 100 tracks spotify
https://api.spotify.com/v1/playlists/18Y1uKbT84hUBRy6oqSH9Q/tracks?market=NO&fields=items%28track%28name%2C+external_urls%2C+preview_url%2C+duration_ms%2C+album%28name%29%2C+artists%28name%29%29&limit=100&offset=0

items(track(name, external_urls, preview_url, duration_ms, album(name), artists(name))&limit=100&offset=0


function HMAC_SHA256(key, message):
    // Step 1: Key preparation
    if length(key) > 64:
        key = SHA256(key)   // Hash key if too long
    if length(key) < 64:
        key = pad(key, 64)  // Pad key with zeros to 64 bytes

    // Step 2: Create ipad and opad
    ipad = 0x36 * 64
    opad = 0x5C * 64

    // Step 3: XOR key with ipad and opad
    inner_padded_key = XOR(key, ipad)
    outer_padded_key = XOR(key, opad)

    // Step 4: Inner hash
    inner_hash = SHA256(inner_padded_key + message)

    // Step 5: Outer hash
    final_hmac = SHA256(outer_padded_key + inner_hash)

    // Step 6: Return result
    return final_hmac


HGERWOISDJHFLEIWUVASsdflgkuhretiwsgundfsvfslerfiguhhbsdkuvsrigubhwsefloiuhalsidufhaslewrkjgvbnsdlfiugsdigufshdergfuilfaerghsfhtHGERWOISDJHFLEIWUVASsdflgkuhretiwsgundfsvfslerfiguhhbsdkuvsrigubhwsefloiuhalsidufhaslewrkjgvbnsdlfiugsdigufshdergfuilfaerghsfhHGERWOISDJHFLEIWUVASsdflgkuhretiwsgundfsvfslerfiguhhbsdkuvsrigubhwsefloiuhalsidufhaslewrkjgvbnsdlfiugsdigufshdergfuilfaerghsfhtHGERWOISDJHFLEIWUVASsdflgkuhretiwsgundfsvfslerfiguhhbsdkuvsrigubhwsefloiuhalsidufhaslewrkjgvbnsdlfiugsdigufshdergfuilfaerghsfhtt


1. JWT Structure Overview
A JWT consists of three parts:

Header (base64url encoded)
Payload (base64url encoded)
Signature (HMAC-SHA256 of the header and payload)
Each part is separated by a dot (.)



JWT
<base64url-encoded header>.<base64url-encoded payload>.<signature>



JWT header
{
  "alg": "HS256",
  "typ": "JWT"
}



JWT payload
{
  "iss": "your-service-account-email@project-id.iam.gserviceaccount.com",
  "scope": "https://www.googleapis.com/auth/youtube.readonly",
  "aud": "https://oauth2.googleapis.com/token",
  "exp": 1623443462,
  "iat": 1623441662
}

4. HMAC-SHA256 Signature
The signature is created by hashing the concatenation of the encoded header and payload using HMAC-SHA256 and your service account's private key.


Fetch playlist details
https://youtube.googleapis.com/youtube/v3/playlists?part=snippet, contentDetails&fields=items(snippet(title, description), contentDetails)&id=PLnV88qJ1K6U-HdOaaoAvJJpM4EC6i8A1r
{
  "items": [
    {
      "snippet": {
        "description": "Use shuffle play.", 
        "title": "Alt Mulig Rart Faenskap Reboot"
      }, 
      "contentDetails": {
        "itemCount": 901
      }
    }
  ]
}



Fetch songs from playlist
https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=3&fields=nextPageToken, pageInfo(resultsPerPage), items(snippet(title, videoOwnerChannelTitle, resourceId(videoId)))&playlistId=PLnV88qJ1K6U-HdOaaoAvJJpM4EC6i8A1r

{
  "nextPageToken": "EAAajgFQVDpDQU1pRUVWRFFqTXpNa1F3UVVJd1JqVTRRaklvQVVqcW5xcmZ1ZS1KQTFBQldrVWlRMmxLVVZSSE5WZFBSR2g0VTJwR1RFNXNWWFJUUjFKUVdWZEdkbEZZV2t0VGJrSk9Ua1ZXUkU1dGF6UlJWRVo1UldkM1NYcDFOa0YxWjFsUmEwNVVRMnBSU1NJ", 
  "items": [
    {
      "snippet": {
        "resourceId": {
          "videoId": "7XyHOdMvHg0"
        }, 
        "videoOwnerChannelTitle": "Dio - Topic", 
        "title": "Rainbow In The Dark"
      }
    }, 
    {
      "snippet": {
        "resourceId": {
          "videoId": "YJ3XDfghs_o"
        }, 
        "videoOwnerChannelTitle": "Lunatic Soul - Topic", 
        "title": "Untamed"
      }
    }, 
    {
      "snippet": {
        "resourceId": {
          "videoId": "gEr_TnIp6Yg"
        }, 
        "videoOwnerChannelTitle": "Buckethead - Topic", 
        "title": "Fastpass"
      }
    }
  ], 
  "pageInfo": {
    "totalResults": 901
  }
}


Fetch song/video data.
https://youtube.googleapis.com/youtube/v3/videos?id=G2iKRrrzIss&part=snippet, contentDetails&fields=items(id, snippet(channelTitle, localized), contentDetails(duration))
{
  "items": [
    {
      "snippet": {
        "channelTitle": "Noise Records", 
        "localized": {
          "description": "Kamelot - Where I Reign is available now for purchase, streaming or download. http://apple.co/29t8Jbw http://amzn.to/29L7UvH", 
          "title": "Kamelot - Karma"
        }
      }, 
      "contentDetails": {
        "duration": "PT5M9S"
      }, 
      "id": "G2iKRrrzIss"
    }
  ]
}
